---
title: "20240711_hdp_tree"
format: html
editor: visual
---

```{r}
library(readr)
library(ape)
# Load necessary libraries
library(dplyr)
library(tidyr)

# Load the required library
library(tibble)
devtools::load_all()
```

## Load data

```{r}
tree <- ape::read.tree('/Users/dfridljand/Documents/Research_too_large/2024-Beerenwinkel/data/WholeExome/pooled_trees_and_cells/pooled_tree.newick')
```

```{r}
# Print a summary of the tree
summary(tree)
```

```{r tree_figure}
# Open a PNG device
png(filename = "../figures/tree.png", width = 800, height = 800)

# Plot the tree
plot(tree)

# Close the device
dev.off()

plot(tree)
#How to save it to "tree.png"?
```

```{r}
list.files()
```

```{r}
#savePlot(filename = "figures/tree.png", device = plot(tree))
```

```{r}
# Read the CSV file
vcf_tricl_mut_counts <- read_csv('/Users/dfridljand/Documents/Research_too_large/2024-Beerenwinkel/data/WholeExome/pooled_trees_and_cells/pooled_cells.csv')
#vcf_tricl_mut_counts <- vcf_tricl_mut_counts %>%
#  select(-c("...1"))
# Convert the first column to row names
vcf_tricl_mut_counts <- column_to_rownames(vcf_tricl_mut_counts, var = 'Cell')

# Convert the data frame to a matrix
#vcf_tricl_mut_counts_matrix <- as.matrix(vcf_tricl_mut_counts)

# View the matrix
#head(vcf_tricl_mut_counts_matrix)
```

```{r}
#remove columns "cellfilters" "subset"      "dataset" from vcf_tricl_mut_counts
vcf_tricl_mut_counts <- vcf_tricl_mut_counts %>%
  select(-c("cellfilters", "subset", "dataset"))
```

# Construct bulk hdp

```{r}
ppindex <-  c(0, rep(1, nrow(vcf_tricl_mut_counts)))
cpindex <- 1 + ppindex
ppindex
```

```{r inithdp}
# initialise HDP
hdp_mut_bulk <- hdp_init(ppindex = ppindex, # index of parental nodes
                    cpindex = cpindex, # index of concentration param
                    hh=rep(1, ncol(vcf_tricl_mut_counts)), # prior is uniform over the 96 mutation categories
                    alphaa=rep(1, 1+ max(ppindex)), # shape hyperparams for five different CPs
                    alphab=rep(1, 1+ max(ppindex))) # rate hyperparams for five different CPs


plot_tree(hdp_mut_bulk)
```

```{r}
dpindex = (2):numdp(hdp_mut_bulk)
#cnsignatures_input_filtered_cin_quant <- as.data.frame(cnsignatures_input_filtered_cin_quant)
# add data to leaf nodes (one per cancer sample, in row order of mut_count)
hdp_mut_bulk <- hdp_setdata(hdp_mut_bulk, 
                       dpindex = dpindex, # index of nodes to add data to
                       data = vcf_tricl_mut_counts) # input data (mutation counts, sample rows match up with specified dpindex)
```

```{r}
hdp_mut_bulk
```

# Construct tree hdp

```{r}
hdp_mut_tree <- create_hdp_tree(tree,
                                vcf_tricl_mut_counts)
```

```{r}
plot_tree(hdp_mut_tree)
```

## Run sampler

```{r, eval = FALSE, cache=TRUE}
 chlist_bulk <- vector("list", 4)
 for (i in 1:4){
 
#   # activate DPs, 10 initial components
   hdp_activated_bulk <- dp_activate(hdp_mut_bulk, 1:numdp(hdp_mut_bulk), initcc=10, seed=i*200)
# 
   chlist_bulk[[i]] <- hdp_posterior(hdp_activated_bulk,
                                burnin=5000,
                                n=50,
                                space=200,
                                cpiter=3,
                                seed=i*1e3)
 }
# 
# # example multi object
 mut_example_multi_bulk <- hdp_multi_chain(chlist_bulk)
 #save mut_example_multi_bulk
 saveRDS(mut_example_multi_bulk, '../data/20240722_mut_example_multi_bulk.Rds')
```

```{r, eval = TRUE}
mut_example_multi_bulk <- readRDS('../data/20240722_mut_example_multi_bulk.Rds')
```

```{r, eval = FALSE, cache = TRUE}
 chlist_tree <- vector("list", 4)
 for (i in 1:4){
 
#   # activate DPs, 10 initial components
   hdp_activated_tree <- dp_activate(hdp_mut_tree, seq_len(numdp(hdp_mut_tree)), initcc=10, seed=i*200)
# 
   chlist_tree[[i]] <- hdp_posterior(hdp_activated_tree,
                                burnin=5000,
                                n=50,
                                space=200,
                                cpiter=3,
                                seed=i*1e3)
 }
# 
# # example multi object
mut_example_multi_tree <- hdp_multi_chain(chlist_tree)
saveRDS(mut_example_multi_tree, '../data/20240722_mut_example_multi_tree.Rds')
```

```{r}
mut_example_multi_tree <- readRDS('../data/20240722_mut_example_multi_tree.Rds')
```

```{r, eval = FALSE}
cat(" Number of data items in data:",
                sum(vcf_tricl_mut_counts), "\n")
cat(" Number of data items in bulk:",
                sum(sapply(hdp_activated_bulk@dp,
                       function(x) x@numdata)), "\n")
cat(" Number of data items in tree:",
                sum(sapply(hdp_activated_tree@dp,
                       function(x) x@numdata)), "\n")
#TODO sanity check
```

# Analyse

## Bulk

```{r, cache=TRUE}
mut_example_multi_bulk <- hdp_extract_components(mut_example_multi_bulk)
mut_example_multi_bulk
```

```{r}
# Open a PNG device
#png(filename = "../figures/plot_comp_size_mut_example_multi_bulk.png", width = 800, height = 800)
par(mfrow=c(1,1), mar=c(5, 4, 4, 2))
# Plot the tree
plot_comp_size(mut_example_multi_bulk, bty="L", incl_nonsig = TRUE)

# Close the device
#dev.off()

# Plot the tree
#plot_comp_size(mut_example_multi_bulk, bty="L", incl_nonsig = TRUE)
```

```{r}
trinuc_context <- sapply(strsplit(colnames(vcf_tricl_mut_counts), '->'), `[`, 1)
group_factor <- as.factor(rep(c("A>C", "A>T", "C>T", "G>A", "G>C", "T>G"),
                           each=16)) #TODO

# pick your colours
mut_colours <- c(RColorBrewer::brewer.pal(10, 'Paired')[seq(1,10,2)], 'grey70')

plot_comp_distn(mut_example_multi_bulk, 
                cat_names=trinuc_context,
                  grouping=group_factor, 
                 col=mut_colours,
                  col_nonsig="grey80", 
                show_group_labels=TRUE
                )

```

## Tree

```{r, cache =TRUE}
mut_example_multi_tree <- hdp_extract_components(mut_example_multi_tree)
mut_example_multi_tree
```

```{r}
par(mfrow=c(1,1), mar=c(5, 4, 4, 2))
plot_comp_size(mut_example_multi_tree, bty="L", incl_nonsig = TRUE)
```

```{r}
trinuc_context <- sapply(strsplit(colnames(vcf_tricl_mut_counts), '->'), `[`, 1)
group_factor <- as.factor(rep(c("A>C", "A>T", "C>T", "G>A", "G>C", "T>G"),
                           each=16)) #TODO

# pick your colours
mut_colours <- c(RColorBrewer::brewer.pal(10, 'Paired')[seq(1,10,2)], 'grey70')

plot_comp_distn(mut_example_multi_tree, 
                cat_names=trinuc_context,
                grouping=group_factor, 
                col=mut_colours,
                col_nonsig="grey80", 
                show_group_labels=TRUE
                )
```
